import tkinter as tk
from tkinter import Canvas
import numpy as np
from PIL import Image, ImageTk

# Function to convert normalized RGB values to hex
def rgb_to_hex(r, g, b):
    return '#{:02x}{:02x}{:02x}'.format(int(r * 255), int(g * 255), int(b * 255))

# Create the tkinter window
root = tk.Tk()
root.title("Interactive Animated Color Gradient")
root.attributes('-fullscreen', True)  # Make the window fullscreen

# Get screen width and height
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
aspect_ratio = 16 / 9
height = screen_height
width = int(screen_height * aspect_ratio) if screen_height * aspect_ratio <= screen_width else screen_width
canvas = Canvas(root, width=width, height=height)
canvas.pack(fill=tk.BOTH, expand=True)

# Create a label to display the hex color value
hex_label = tk.Label(root, text="Click on the gradient to see the hex color value", font=("Arial", 24), fg='black')
hex_label.place(relx=0.5, rely=0.5, anchor=tk.CENTER)

# Generate the initial gradient image with reduced resolution
reduced_height = height // 4
reduced_width = width // 4
gradient = np.zeros((reduced_height, reduced_width, 3), dtype=np.uint8)
gradient_image = Image.fromarray(gradient).resize((width, height), Image.NEAREST)
gradient_photo = ImageTk.PhotoImage(gradient_image)
canvas_image = canvas.create_image(0, 0, anchor=tk.NW, image=gradient_photo)

# Initialize animation parameters
t = 0

# Update function for animation using NumPy vectorized operations
def update_gradient():
    global t, gradient_photo, canvas_image
    t += 2  # Adjust the step size for a balanced animation speed
    j = np.linspace(0, 1, reduced_width)
    i = np.linspace(0, 1, reduced_height).reshape(-1, 1)
    r = (j * 255).astype(np.uint8)
    g = ((i + t / reduced_height) % 1 * 255).astype(np.uint8)
    b = (((i + j + t / (2 * reduced_width)) % 1) * 255).astype(np.uint8)
    gradient[:, :, 0] = r
    gradient[:, :, 1] = g
    gradient[:, :, 2] = b

    # Update the image
    gradient_image = Image.fromarray(gradient).resize((width, height), Image.NEAREST)
    gradient_photo = ImageTk.PhotoImage(gradient_image)
    canvas.itemconfig(canvas_image, image=gradient_photo)

    # Schedule the next update with a more balanced rate
    root.after(30, update_gradient)  # Adjusted to 30ms for smoother performance

# Define the callback function for mouse clicks
def on_click(event):
    x, y = event.x * reduced_width // width, event.y * reduced_height // height
    r, g, b = gradient[y, x]
    hex_color = rgb_to_hex(r / 255, g / 255, b / 255)
    hex_label.config(text=f"Hex Color: {hex_color}")

# Bind the click event to the canvas
canvas.bind("<Button-1>", on_click)

# Start the animation
update_gradient()

# Run the tkinter main loop
root.mainloop()
